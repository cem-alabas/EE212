ORG 0
ACALL CONFIGURE_LCD
ACALL KEYBOARD
ACALL SEND_DATA
ANL A, #0Fh
MOV B, #100D ; first digit of the input taken and written
MUL AB
MOV R1, A

ACALL KEYBOARD
ACALL SEND_DATA
ANL A, #0Fh
MOV B, #10d
MUL AB
MOV R0, A ; second digit of the input taken and written
MOV A, R1
ADD A, R0
MOV R5,A
COME_HERE:
ACALL KEYBOARD
CJNE A, #'#', COME_HERE ; waiting for the pressing A to show the output

MAIN_ROUTINE:
    ; Subtract 5 from the value in R5
    MOV A, R5
    SUBB A, #5	; subtracting 5 from the 3 digit number
    MOV R5, A
    JZ HERE
MOV TMOD, #11H
	ACALL CONFIGURE_LCD
	MOV R6, #2
	MOV TH0, #0CH   ; calculating the total delay
        MOV TL0, #0AFH
        SETB TR0
;weh have already delay which comes from the lcd confirugation so that we do not need to add half secon delay
LOOP_DELAY:            
	WAIT_FOR_OVERFLOW:
    	JNB TF0, WAIT_FOR_OVERFLOW  ; Wait for overflow flag
    	CLR TF0 
	DJNZ R6, LOOP_DELAY 
	MOV A, R5    ; 
	MOV B, #100   
	DIV AB         
	MOV R7, A      
	ADD A, #48    
	ACALL SEND_DATA 
	MOV A, B       
	MOV B, #10
	DIV AB        
	MOV R1, A      
	ADD A, #48    
	ACALL SEND_DATA 
	MOV A, #2EH ; "."
	ACALL SEND_DATA
	MOV A, B      
	ADD A, #48     
	ACALL SEND_DATA 
	MOV A, #20H
	ACALL SEND_DATA
	MOV A, #'s'
	ACALL SEND_DATA
	MOV A, #'e'
	ACALL SEND_DATA
	MOV A, #'c'
	ACALL SEND_DATA
	SJMP MAIN_ROUTINE

HERE:
ACALL CONFIGURE_LCD
	MOV A, #'L'
	ACALL SEND_DATA
	MOV A, #'A'
	ACALL SEND_DATA
	MOV A, #'U'
	ACALL SEND_DATA
	MOV A, #'N'
	ACALL SEND_DATA
	MOV A, #'C'
	ACALL SEND_DATA
	MOV A, #'H'
	ACALL SEND_DATA
STAY_HERE: SJMP STAY_HERE

CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'
END


STOP:		sjmp STOP
	END
































